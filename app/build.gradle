buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.google.gms:google-services:3.1.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'signing'
apply plugin: "jacoco"

group = 'com.ramotion.foldingcell.examples'
version = '1.0.0'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}
dependencies {
    compile 'com.mixpanel.android:mixpanel-android:5.+'
    //compile "com.google.android.gms:play-services:7.5.0+"
}



android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId 'com.tesis.pedroas93.siapp'
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix " Debug"
            debuggable true
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    productFlavors {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.github.apl-devs:appintro:v4.2.2'
    compile 'com.android.support:appcompat-v7:25.3.1'


    //compile 'com.google.android.gms:play-services-base:9.0.0'
    // compile 'com.google.android.gms:play-services-gcm:9.2.0'


    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile 'com.roughike:bottom-bar:2.0.2'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.google.firebase:firebase-messaging:11.0.4'
    testCompile 'junit:junit:4.12'
    compile 'com.ramotion.foldingcell:folding-cell:1.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'

    // JSON Parsing
    compile 'com.google.code.gson:gson:2.6.1'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    compile 'com.android.support:recyclerview-v7:25.0.1'
    //compile 'com.google.android.gms:play-services:11.4.2'
    //compile  'com.google.android.gms: play-services-base: 7.5.0+'
    //compile  'com.google.android.gms:play-services:11.4.2'



    //Onboarding

    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }



}
jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/jacoco")

}

task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: [
                    '**/R*.class',
                    '**/BuildConfig*'
            ]
    )

    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

apply plugin: "com.google.gms.google-services"
